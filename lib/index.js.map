{"version":3,"sources":["../src/index.js"],"names":["Promise","connect","jest","fn","mockedReturn","op","modelName","cb","mock","mockingoose","__mocks","err","Error","reject","resolve","Query","prototype","exec","mockImplementation","model","Model","save","options","constructor","doMock","target","traps","get","prop","hasOwnProperty","Reflect","toReturn","o","Proxy"],"mappings":";;;;;;AAAA;;;;;;;;AAEA,mBAASA,OAAT,GAAmBA,OAAnB;AACA,mBAASC,OAAT,GAAmBC,KAAKC,EAAL,EAAnB;;AAEA,IAAMC,eAAe,SAAfA,YAAe,CAACC,EAAD,EAAKC,SAAL,EAAgBC,EAAhB,EAAuB;AAC1C,MAAMC,OAAOC,YAAYC,OAAZ,CAAoBJ,SAApB,EAA+BD,EAA/B,CAAb;AACA,MAAIM,MAAM,IAAV;;AAEA,MAAGH,gBAAgBI,KAAnB,EAA0BD,MAAMH,IAAN;;AAE1B,MAAGD,EAAH,EAAO,OAAOA,GAAGI,GAAH,EAAQH,IAAR,CAAP;;AAEP,MAAGG,GAAH,EAAQ,OAAOX,QAAQa,MAAR,CAAeF,GAAf,CAAP;AACR,SAAOX,QAAQc,OAAR,CAAgBN,IAAhB,CAAP;AACD,CAVD;;AAYA,mBAASO,KAAT,CAAeC,SAAf,CAAyBC,IAAzB,GAAgCf,KAAKC,EAAL,GAAUe,kBAAV,CAA6B,SAASX,EAAT,CAAYA,EAAZ,EAAgB;AAAA,MACnEF,EADmE,GACvC,IADuC,CACnEA,EADmE;AAAA,MACtDC,SADsD,GACvC,IADuC,CAC/Da,KAD+D,CACtDb,SADsD;;;AAG3E,SAAOF,aAAaC,EAAb,EAAiBC,SAAjB,EAA4BC,EAA5B,CAAP;AACD,CAJ+B,CAAhC;;AAMA,mBAASa,KAAT,CAAeJ,SAAf,CAAyBK,IAAzB,GAAgC,UAASC,OAAT,EAAkBf,EAAlB,EAAsB;AACpD,MAAMF,KAAK,MAAX;AADoD,MAE5CC,SAF4C,GAE9B,KAAKiB,WAFyB,CAE5CjB,SAF4C;;;AAIpD,MAAG,OAAOgB,OAAP,KAAmB,UAAtB,EAAkCf,KAAKe,OAAL;;AAElC,SAAOlB,aAAaC,EAAb,EAAiBC,SAAjB,EAA4BC,EAA5B,CAAP;AACD,CAPD;;AASAL,KAAKsB,MAAL,CAAY,UAAZ,EAAwB;AAAA;AAAA,CAAxB;;AAEA,IAAMC,SAAS;AACbf,WAAS;AADI,CAAf;;AAIA,IAAMgB,QAAQ;AACZC,KADY,eACRF,MADQ,EACAG,IADA,EACM;AAChB,QAAGH,OAAOI,cAAP,CAAsBD,IAAtB,CAAH,EAAgC,OAAOE,QAAQH,GAAR,CAAYF,MAAZ,EAAoBG,IAApB,CAAP;;AAEhC,WAAO;AACLG,cADK,oBACIC,CADJ,EACoB;AAAA,YAAb3B,EAAa,uEAAR,MAAQ;;AACvBoB,eAAOf,OAAP,CAAekB,IAAf,wBACGvB,EADH,EACQ2B,CADR;AAGD;AALI,KAAP;AAOD;AAXW,CAAd;;AAcA,IAAMvB,cAAc,IAAIwB,KAAJ,CAAUR,MAAV,EAAkBC,KAAlB,CAApB;;kBAEejB,W","file":"index.js","sourcesContent":["import mongoose from 'mongoose';\r\n\r\nmongoose.Promise = Promise;\r\nmongoose.connect = jest.fn();\r\n\r\nconst mockedReturn = (op, modelName, cb) => {\r\n  const mock = mockingoose.__mocks[modelName][op];\r\n  let err = null;\r\n\r\n  if(mock instanceof Error) err = mock;\r\n\r\n  if(cb) return cb(err, mock);\r\n\r\n  if(err) return Promise.reject(err);\r\n  return Promise.resolve(mock)\r\n};\r\n\r\nmongoose.Query.prototype.exec = jest.fn().mockImplementation(function cb(cb) {\r\n  const { op, model: { modelName }} = this;\r\n\r\n  return mockedReturn(op, modelName, cb);\r\n});\r\n\r\nmongoose.Model.prototype.save = function(options, cb) {\r\n  const op = 'save';\r\n  const { modelName } = this.constructor;\r\n\r\n  if(typeof options === 'function') cb = options;\r\n\r\n  return mockedReturn(op, modelName, cb);\r\n};\r\n\r\njest.doMock('mongoose', () => mongoose);\r\n\r\nconst target = {\r\n  __mocks: {}\r\n};\r\n\r\nconst traps = {\r\n  get(target, prop) {\r\n    if(target.hasOwnProperty(prop)) return Reflect.get(target, prop);\r\n\r\n    return {\r\n      toReturn(o, op = 'find') {\r\n        target.__mocks[prop] = {\r\n          [op]: o\r\n        };\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst mockingoose = new Proxy(target, traps);\r\n\r\nexport default mockingoose;\r\n"]}